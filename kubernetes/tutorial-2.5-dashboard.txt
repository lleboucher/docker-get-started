=========================
2.5 - Setup the dashboard   ---  NOT COMPLETED ---
=========================


FROM:https://github.com/kubernetes/dashboard/blob/master/README.md

tso@laptop:~$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
secret/kubernetes-dashboard-certs created
serviceaccount/kubernetes-dashboard created
role.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created
rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-minimal created
deployment.apps/kubernetes-dashboard created
service/kubernetes-dashboard created

tso@laptop:~$ kubectl get services
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   8m25s

tso@laptop:~$ kubectl get pods -A -o wide
NAMESPACE     NAME                                    READY   STATUS    RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-6955765f44-lzwgk                1/1     Running   0          8m10s   10.244.0.2   k8s-master   <none>           <none>
kube-system   coredns-6955765f44-wxqnn                1/1     Running   0          8m10s   10.244.0.3   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                         1/1     Running   0          8m22s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master               1/1     Running   0          8m22s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master      1/1     Running   0          8m22s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-bq9mz                        1/1     Running   0          8m10s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-rl4lh                        1/1     Running   0          3m47s   10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-zstqk                        1/1     Running   0          3m57s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-scheduler-k8s-master               1/1     Running   0          8m22s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kubernetes-dashboard-7c54d59f66-h6fk5   1/1     Running   0          59s     10.244.1.2   k8s-slave1   <none>           <none>

On a different terminal:

tso@laptop:~$ kubectl proxy
Starting to serve on 127.0.0.1:8001

Access the dashboard on the following URL on the browser of the host machine:
http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/

=> Error trying to reach service: 'dial tcp 10.244.1.2:8443: i/o timeout'











FROM: https://stackoverflow.com/questions/59006501/how-can-i-remotely-access-kubernetes-dashboard-with-token


tso@laptop:~$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta6/aio/deploy/recommended.yaml
namespace/kubernetes-dashboard created
serviceaccount/kubernetes-dashboard created
service/kubernetes-dashboard created
secret/kubernetes-dashboard-certs created
secret/kubernetes-dashboard-csrf created
secret/kubernetes-dashboard-key-holder created
configmap/kubernetes-dashboard-settings created
role.rbac.authorization.k8s.io/kubernetes-dashboard created
clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created
rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created
clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created
deployment.apps/kubernetes-dashboard created
service/dashboard-metrics-scraper created
deployment.apps/dashboard-metrics-scraper created


Start the proxy on a different terminal (or with &):

tso@laptop:~$ kubectl proxy&
Starting to serve on 127.0.0.1:8001

Create a secret:

tso@laptop:~$ kubectl create serviceaccount tso-admin-dashboard
serviceaccount/tso-admin-dashboard created

tso@laptop:~$ kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=default:tso-admin-dashboard
clusterrolebinding.rbac.authorization.k8s.io/dashboard-admin created

tso@laptop:~$ kubectl get secret
NAME                              TYPE                                  DATA   AGE
default-token-mgdlc               kubernetes.io/service-account-token   3      80m
tso-admin-dashboard-token-tpg8g   kubernetes.io/service-account-token   3      70s

tso@laptop:~$ kubectl describe secret tso-admin-dashboard
Name:         tso-admin-dashboard-token-tpg8g
Namespace:    default
Labels:       <none>
Annotations:  kubernetes.io/service-account.name: tso-admin-dashboard
              kubernetes.io/service-account.uid: bc98e5ad-a40c-4f55-a0cf-5d01d658bbde

Type:  kubernetes.io/service-account-token

Data
====
ca.crt:     1025 bytes
namespace:  7 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IjRubHJqM29NQjFRUDlDM1N2Ykhoa04xU3JmQlVxS1pOV2RtQ1EzcUZyS0kifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6InRzby1hZG1pbi1kYXNoYm9hcmQtdG9rZW4tdHBnOGciLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoidHNvLWFkbWluLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6ImJjOThlNWFkLWE0MGMtNGY1NS1hMGNmLTVkMDFkNjU4YmJkZSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OnRzby1hZG1pbi1kYXNoYm9hcmQifQ.hsx0v4MfkEkAE7GEc1ry3DKuyvT1LEASLaSgbfnISELLxAVxG_9IzJWcOzErgAkff-w4KsinaRONSzdNFxr78IDhVWS-kmRiVVCsQ6cdAZ00u0dpRoQn6l8tFbnAAIA79NFTeBtiSmdOcRyoN8bV-XkwqIsK3tqRQp0SebwxT4SyV2OKiLeGmq_quAML_KfixriMR1tfT_7oasIzezvDk9KepGil0H1xk6GYzKwENvfdsXqyou5Gft50QvQcoBXzlEt9-ga-iJYBKqrmuIfIWgK6gQir08LEkNENPe_z4isit4diMTLMmY9v26qwngDrgP_tQfT-gQuQLxyN8VlKjA

Then establish a tunnel from the host to the master:

tso@laptop:~$ ssh -L 9999:127.0.0.1:8001 -N -f -l thierry 192.168.0.63
thierry@192.168.0.63's password: 

Once the tunnel is up and running, you should be able to view the dashboard 
from the browser on hour host machine at the following url:










































The cluster is running but it is very difficult to see what is actually 
happening, so it is time to setup the dashboad which visualizes the status 
of the cluster.

Start with login into the master and launch the installation command for the 
dashboard:




root@k8s-master:/# kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/head.yaml
namespace/kubernetes-dashboard-head created
serviceaccount/kubernetes-dashboard-head created
service/kubernetes-dashboard-head created
secret/kubernetes-dashboard-csrf created
secret/kubernetes-dashboard-key-holder created
configmap/kubernetes-dashboard-settings created
role.rbac.authorization.k8s.io/kubernetes-dashboard-head created
clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard-head created
rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-head created
clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-head created
deployment.apps/kubernetes-dashboard-head created
service/dashboard-metrics-scraper-head created
deployment.apps/dashboard-metrics-scraper-head created

As you can see, Kubernetes pulls the resources from GitHub and starts pods 
to run the dashboard application (which is a web server). Check where the 
pods are running:

tso@laptop:~$ kubectl get pods --all-namespaces -o wide | grep dashb
kubernetes-dashboard-head   dashboard-metrics-scraper-head-7cc7d9bb4b-9cps7   1/1     Running   0          91s   10.244.1.2   k8s-slave1   <none>           <none>
kubernetes-dashboard-head   kubernetes-dashboard-head-5c87564c95-6qnkz        1/1     Running   0          91s   10.244.2.2   k8s-slave2   <none>           <none>

The workload is distributed over the two slave nodes. In order to access this
dasboard, we now need to creae users with teh right roles and authorisations
(i.e. profiles with the rights in RBAC mode)

Let's now check the services which are running on the cluster:

tso@laptop:~$ kubectl get services -A -o wide
NAMESPACE                   NAME                             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                  AGE   SELECTOR
default                     kubernetes                       ClusterIP   10.96.0.1       <none>        443/TCP                  24m   <none>
kube-system                 kube-dns                         ClusterIP   10.96.0.10      <none>        53/UDP,53/TCP,9153/TCP   24m   k8s-app=kube-dns
kubernetes-dashboard-head   dashboard-metrics-scraper-head   ClusterIP   10.96.52.67     <none>        8000/TCP                 56s   k8s-app=dashboard-metrics-scraper-head
kubernetes-dashboard-head   kubernetes-dashboard-head        ClusterIP   10.96.220.146   <none>        443/TCP                  56s   k8s-app=kubernetes-dashboard-head

You now need to create an admin account for the dashboard and the 
corresponding role:

Crate a 'admin-user.yaml' file with the following content:

apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kube-system

Then create a 'admin-role.yaml' file with the following content:

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kube-system

And finally load this account and the role into the cluster:

tso@laptop:~$ kubectl apply -f admin-user.yaml
serviceaccount/admin-user created
tso@laptop:~$ kubectl apply -f admin-role.yaml
clusterrolebinding.rbac.authorization.k8s.io/admin-user created

You now want to enable the host machine to connect to the dashboad: in order 
to do so, you first need to enable the host to 'see' the dashboard service: we
will achieve this by asking Kubernetes to proxy the dashboard service back to 
the host. Since the corresponding command will mobilise the terminal, execute 
it in aonther terminal window:

tso@laptop:~$ kubectl proxy
Starting to serve on 127.0.0.1:8001

Since recent versions, the access to the dashboard has been more secured, so we need to get some secrets:







thierry@k8s-master:~/.kube$ kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')
Name:         admin-user-token-tnh22
Namespace:    kube-system
Labels:       <none>
Annotations:  kubernetes.io/service-account.name: admin-user
              kubernetes.io/service-account.uid: ab769855-b29a-4cce-8271-edfca5986080

Type:  kubernetes.io/service-account-token

Data
====
ca.crt:     1025 bytes
namespace:  11 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IjRubHJqM29NQjFRUDlDM1N2Ykhoa04xU3JmQlVxS1pOV2RtQ1EzcUZyS0kifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLXRuaDIyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJhYjc2OTg1NS1iMjlhLTRjY2UtODI3MS1lZGZjYTU5ODYwODAiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.Ew1jWNMnuw7jHTwsjsa6pWjW9oKc7vBHXj4ZFvrdVJyZZ_dtTh1HL0QIS9rtY7vEgUs2cIDWWcmF5ZtEWqHr63i8w-T3Ahd1SDdVKhNrt6ujzLsRhJZXlFDu6zpKMtc4QCx_7Q5a4mTiPqKnt1bP20rEWftBHRfbH74gYAzSVHILp7t3Ft_H8Jw5HsPoiM5rgWohOGWZB9mUkC5TWs3zdO8TFR3oYhbiUmmnivcfRVA4oetzhIl6azIkmmjlTUuSXCp9NhzGCVMctAkVHBUNqvacRSQ-Xjs1FiFGJZOXM2rrOyvk_o6AR_lxbHanZ6I1J6_7DXxnh66t7gxZ6ZGm-A








tso@laptop:~$ kubectl -n kube-system get secret
NAME                                             TYPE                                  DATA   AGE
admin-user-token-tnh22                           kubernetes.io/service-account-token   3      17m
attachdetach-controller-token-crb7t              kubernetes.io/service-account-token   3      46m
bootstrap-signer-token-sz769                     kubernetes.io/service-account-token   3      46m
bootstrap-token-fwt4d1                           bootstrap.kubernetes.io/token         7      46m
certificate-controller-token-7tf5m               kubernetes.io/service-account-token   3      46m
clusterrole-aggregation-controller-token-2qwgz   kubernetes.io/service-account-token   3      46m
coredns-token-mrrdk                              kubernetes.io/service-account-token   3      46m
cronjob-controller-token-8h6ts                   kubernetes.io/service-account-token   3      46m
daemon-set-controller-token-rvv6w                kubernetes.io/service-account-token   3      46m
default-token-f6vz6                              kubernetes.io/service-account-token   3      46m
deployment-controller-token-bmsrc                kubernetes.io/service-account-token   3      46m
disruption-controller-token-b5w9w                kubernetes.io/service-account-token   3      46m
endpoint-controller-token-fs7xj                  kubernetes.io/service-account-token   3      46m
expand-controller-token-rpqlf                    kubernetes.io/service-account-token   3      46m
flannel-token-5c6hf                              kubernetes.io/service-account-token   3      43m
generic-garbage-collector-token-cwnkm            kubernetes.io/service-account-token   3      46m
horizontal-pod-autoscaler-token-hjpvg            kubernetes.io/service-account-token   3      46m
job-controller-token-m59nt                       kubernetes.io/service-account-token   3      46m
kube-proxy-token-d5c6d                           kubernetes.io/service-account-token   3      46m
namespace-controller-token-9hpbf                 kubernetes.io/service-account-token   3      46m
node-controller-token-g5snf                      kubernetes.io/service-account-token   3      46m
persistent-volume-binder-token-dkkbt             kubernetes.io/service-account-token   3      46m
pod-garbage-collector-token-vzfcg                kubernetes.io/service-account-token   3      46m
pv-protection-controller-token-8jghj             kubernetes.io/service-account-token   3      46m
pvc-protection-controller-token-9c8pn            kubernetes.io/service-account-token   3      46m
replicaset-controller-token-rtbzk                kubernetes.io/service-account-token   3      46m
replication-controller-token-gww9h               kubernetes.io/service-account-token   3      46m
resourcequota-controller-token-sncjn             kubernetes.io/service-account-token   3      46m
service-account-controller-token-8pbfm           kubernetes.io/service-account-token   3      46m
service-controller-token-dnxxt                   kubernetes.io/service-account-token   3      46m
statefulset-controller-token-p6tcc               kubernetes.io/service-account-token   3      46m
token-cleaner-token-s9ddr                        kubernetes.io/service-account-token   3      46m
ttl-controller-token-tpgtb                       kubernetes.io/service-account-token   3      46m

tso@laptop:~$ kubectl -n kube-system describe secret deployment-controller-token-bmsrc
Name:         deployment-controller-token-bmsrc
Namespace:    kube-system
Labels:       <none>
Annotations:  kubernetes.io/service-account.name: deployment-controller
              kubernetes.io/service-account.uid: caafb505-91ab-4d95-922c-51da30181d7d

Type:  kubernetes.io/service-account-token

Data
====
namespace:  11 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IjRubHJqM29NQjFRUDlDM1N2Ykhoa04xU3JmQlVxS1pOV2RtQ1EzcUZyS0kifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkZXBsb3ltZW50LWNvbnRyb2xsZXItdG9rZW4tYm1zcmMiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVwbG95bWVudC1jb250cm9sbGVyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiY2FhZmI1MDUtOTFhYi00ZDk1LTkyMmMtNTFkYTMwMTgxZDdkIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRlcGxveW1lbnQtY29udHJvbGxlciJ9.ePmuSfi582vSGgE1DUwqp5CacDMLXTNF7MJyqNyJWClTCBKRovMRsBR99SxoYzM1KXk2Doka5cn03ZSfdTXIdQJLUaFOf85-NlGoKA9YcDvq8wFSzb_debqpnuUh75cRPzxKgbi4agM2u3mP6_ZwP4RbUgKe0wlm1oQikVPvfpLjGZea0x6LEsoAJlGzlleclhno02d78AqHql_MqdLAMwfpgNu2iwrVt_domTgaBWwAp5YETe1wqP446QGvNHcQhtcK6wJ3cMMGEy7oP36yB2eayzbS7P4jQUrv9NuK-F9BfhfpyBOAJVw1d7RbUqX54FdHgm1ojvO1HhSRVe7Fxw
ca.crt:     1025 bytes


ALTERNATIVE : get the token in a single command:

tso@laptop:~$ kubectl -n kube-system describe secret $(
  kubectl -n kube-system get secret | \
  awk '/^deployment-controller-token-/{print $1}'
) | \
awk '$1=="token:"{print $2}'
eyJhbGciOiJSUzI1NiIsImtpZCI6IjRubHJqM29NQjFRUDlDM1N2Ykhoa04xU3JmQlVxS1pOV2RtQ1EzcUZyS0kifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkZXBsb3ltZW50LWNvbnRyb2xsZXItdG9rZW4tYm1zcmMiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVwbG95bWVudC1jb250cm9sbGVyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiY2FhZmI1MDUtOTFhYi00ZDk1LTkyMmMtNTFkYTMwMTgxZDdkIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRlcGxveW1lbnQtY29udHJvbGxlciJ9.ePmuSfi582vSGgE1DUwqp5CacDMLXTNF7MJyqNyJWClTCBKRovMRsBR99SxoYzM1KXk2Doka5cn03ZSfdTXIdQJLUaFOf85-NlGoKA9YcDvq8wFSzb_debqpnuUh75cRPzxKgbi4agM2u3mP6_ZwP4RbUgKe0wlm1oQikVPvfpLjGZea0x6LEsoAJlGzlleclhno02d78AqHql_MqdLAMwfpgNu2iwrVt_domTgaBWwAp5YETe1wqP446QGvNHcQhtcK6wJ3cMMGEy7oP36yB2eayzbS7P4jQUrv9NuK-F9BfhfpyBOAJVw1d7RbUqX54FdHgm1ojvO1HhSRVe7Fxw

We shall use this token when we want to log into the dashboard: you now can 
access the dashboard from your browser (running on the host) at this url:
http://127.0.0.1:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/
Since the welcome page requets a login: choose the 'Token' option and paste 
the token above into the field.






Récupérer le token de connexion
Pour vous connecter au Dashboard, en plus d'avoir le pod et un utilisateur, il vous faut le token qui va bien. Pour le récupérer :


Name:         admin-user-token-g4h4m
Namespace:    kube-system
Labels:       <none>
Annotations:  kubernetes.io/service-account.name: admin-user
              kubernetes.io/service-account.uid: 2124843b-2815-47f5-a558-cb5956bd61d7

Type:  kubernetes.io/service-account-token

Data
====
ca.crt:     1025 bytes
namespace:  11 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IkUyTVprdjJuMGJ1NkVyeFlweFVHd2RtWHR2ZHFDS1JFb21SMDNQNEY3UlUifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWc0aDRtIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyMTI0ODQzYi0yODE1LTQ3ZjUtYTU1OC1jYjU5NTZiZDYxZDciLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.JmnyHQCNRqT90GhMub82keXrhJGi5cOVrKdPoM1Psw6s7qDBRpOobthUVw1KJ5abnFgTnEhVmRW52HcF4dCg2aPcKa5PcFidXtXVdyFXHM2-VUVYDw-97yeVKm9degPES11rs5bcnGGX0Fp7TAN38IhwmDDVcmcR4S7EftnOk1_RkG77Fuauu4mDYDO6kzm9ySrdMP_eF2XsoZr_1JLGucGmMDKaAryRAHPTl11t-i45mE_6NtxGdYo1eukPqKpvKF7-fQz-0Bbg3Pzavoko-nrv1TPZECPAj_cXZk3wptoYzg-Ye_h_dua0ue6CUanE1SY60u0kDmPK8aXGJfZUaw


Copy the token (yeah, I know, its long...)


Accéder au Dashboard
Le Dashboard n'est par défaut pas accessible en dehors du cluster. On peut cependant tricher en passant par un proxy et un tunnel SSH.
Le proxy
Ouvrez un nouveau terminal branché sur votre master et tapez la commande suivante :

dada@k8smaster:~$ kubectl proxy
Starting to serve on 127.0.0.1:8001

Le tunnel SSH
Depuis votre PC hôte, lancez le tunnel :

dada@dada-laptop:~$ ssh -L 8001:127.0.0.1:8001 thierry@192.168.0.63

Affichez le fameux tant attendu
Si tout s'est bien passé jusqu'ici, vous deviez pouvoir accéder au Dashboard via cette url :

http://192.168.0.108:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/overview?namespace=_all 

=> ça ne marche pas: ce qui s'affiche est un record de failure.

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
=============================================================================
=============================================================================
NOTES FOR COMPLETING THE DASHBOARD SECTION
=============================================================================
=============================================================================

 
Installing the dashboard:


To install the Dashboard, run the following command from the master:

$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended/kubernetes-dashboard.yaml

Kubernetes va aller chercher la configuration nécessaire la mise à en place du Dashboard directement depuis son dépôt Github et le faire apparaître dans la liste des pods de votre cluster.

$  kubectl get pods --all-namespaces -o wide | grep dashb
kube-system   kubernetes-dashboard-77fd78f978-f8p9l   1/1     Running   0          60s     10.244.1.230   k8snode1    <none>

Il est  "Running", ça veut dire qu'il est disponible, mais pas encore accessible.
Créez un compte utilisateur
Créez un fichier admin-user.yaml avec ce qui suit dedans :

apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kube-system

Puis créez le rôle qui lui sera attaché : admin-role.yaml

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kube-system

Chargez ces configurations dans le cluster :

kubectl apply -f admin-user.yaml
kubectl apply -f admin-role.yaml

Récupérer le token de connexion
Pour vous connecter au Dashboard, en plus d'avoir le pod et un utilisateur, il vous faut le token qui va bien. Pour le récupérer :

dada@k8smaster:~$ kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')
Name:         admin-user-token-b8qmq
Namespace:    kube-system
Labels:       <none>
Annotations:  kubernetes.io/service-account.name: admin-user
              kubernetes.io/service-account.uid: a8a600b1-e010-11e8-96ec-0800273c4560

Type:  kubernetes.io/service-account-token

Data
====
ca.crt:     1025 bytes
namespace:  11 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJl.........

J'ai tronqué l'affichage du token. Il est d'une longueur dingue. Copiez-le dans un coin maintenant que vous l'avez.
Accéder au Dashboard
Le Dashboard n'est par défaut pas accessible en dehors du cluster. On peut cependant tricher en passant par un proxy et un tunnel SSH.
Le proxy
Ouvrez un nouveau terminal branché sur votre master et tapez la commande suivante :

dada@k8smaster:~$ kubectl proxy
Starting to serve on 127.0.0.1:8001

Le tunnel SSH
Depuis votre PC hôte, lancez le tunnel :

dada@dada-laptop:~$ ssh -L 8001:127.0.0.1:8001 dada@IP_DU_MASTER

Affichez le fameux tant attendu
Si tout s'est bien passé jusqu'ici, vous deviez pouvoir accéder au Dashboard via cette url :

http://127.0.0.1:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/overview?namespace=_all

Et voir ceci : 


Vous voici avec une belle interface pour admirer le comportement de votre cluster k8s. Foncez cliquer absolument partout et chercher le pourquoi du comment de telles options à tel endroit !

