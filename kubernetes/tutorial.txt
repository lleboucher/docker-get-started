#!/usr/bin/env bash


###############################################################################
#
# Learn Kubernetes Basics - Part 0 - pre-requisites
#
###############################################################################


This tutorial mixes elements from the official Kubernetes site 'get started' 
section, and also from Dada's blog (specifically for setting up the 
Kubernetes clusters on VMs running on a laptop):
    https://kubernetes.io/docs/tutorials/kubernetes-basics/
    https://www.dadall.info/article658/preparer-virtualbox-pour-kubernetes

Here are the identified pre-requisites to run this tutorial and actually
learn something from this experience:

    - have a linux laptop, with a 'admin' account (i.e. need to have
      the sudo privilege). Ubuntu will be perfect for beginners.
    - have curl, git and virtualbox installed

Also, you will find several resources in the directory:
    - flannel.yml - a kubernetes network model
    - server.js   - a node.js example application used as of part 3
    - Dockerfile  - to build the container for the application
    - several VirtualBox VM images in order to build the Kubernetes cluster,
      located in the "VM_images" sub-directory


This is it. Nothing else is needed... except the desire to learn :-)



###############################################################################
#
# Learn Kubernetes Basics - Part 1 - Kubernetes Basics
#
###############################################################################


=================
Kubernetes Basics
=================

This tutorial provides a walkthrough of the basics of the Kubernetes cluster
orchestration system. Each module contains some background information on
major Kubernetes features and concepts. You will actually deploy and manage 
a simple cluster and its containerized applications by yourself.

Following the tutorial steps, you can learn to:

  - Deploy a Kubernetes cluster
  - Deploy a containerized application on a cluster.
  - Scale the deployment.
  - Update the containerized application with a new software version.
  - Debug the containerized application.


===============================
What can Kubernetes do for you?
===============================

With modern web services, users expect applications to be available 24/7, and
developers expect to deploy new versions of those applications several times
a day. Containerization helps package software to serve these goals, enabling
applications to be released and updated in an easy and fast way without
downtime. Kubernetes helps you make sure those containerized applications run
where and when you want, and helps them find the resources and tools they
need to work. Kubernetes is a production-ready, open source platform designed
with Google's accumulated experience in container orchestration, combined 
with best-of-breed ideas from the community.



###############################################################################
#
# Learn Kubernetes Basics - Part 2 - Create a cluster
#
###############################################################################



======================================
2.1 - Naming conventions & unique data
======================================


In this section, we will build step by step the infrastructure on which we 
will deploy a Kubernetes cluster. We intentionaly make every step manual, so 
that you can appreciate the full process at leat once in your lifetime. In 
real production world, most of these steps are automated and you would simply 
"push a button".

The steps are:
    - building an initial  VM image ("K8s BARE") with all the prerequisites 
      installed (Ubuntu OS, docker, kubernetes)
    - renaming a VM to be the master node ("K8s master - cluster not deployed"), 
      derived from "K8S BARE"
    - renaming two 'slave' VMs ("K8s slave - cluster not deployed") derived from 
      "K8s BARE"
    - initialize and deploy a Kubernetes on the master, and join the two 
      slaves into the cluster (all VMs are then called "cluster deployed")
    - setup a dashboard and access it

You may skip this step and use directly the "cluster deployed" images in order to skip this step and go directly to part 3.


#
#      WARNING
#
# Few informations will be unique to each deployement and you need to 
# carefully copy and save these informations in order to adapt the commands 
# as shown in the tutorial (i.e. replace the tutorial's info with yours) and 
# run your own version of the commands:
#
# 1) the ip@ of the VMs
#
# In the tutorial, I used (copied from a real execution):
#    master:  192.168.0.108
#    slave 1: 192.168.0.109
#    slave 2: 192.168.0.110
#
# 2) the token required for a node to join into the cluster
#
# In the following examples, I used:
#
# kubeadm join 192.168.0.108:6443 --token q3nz0g.n2l9ow787j7enj8j \
    --discovery-token-ca-cert-hash \
    sha256:191a8bc561c244591b428dd3a8b82f0b26d34afeed4115626c876c97a6839729
# 
# 


===========================
2.2 - Building the first VM
===========================

(you can skip this phase and use directly the "K8s BARE" image)

Nothing fancy here: we've built from the Ubuntu Server 18.04 LTS, with:
  - two CPUs (it is mandatory to run a Kubernetes master)
  - 2048 MB memory
  - two network interfaces:
       * one NAT (which is default setting) for internet connectivity
       * one configured in a "Bridge Adapter" mode, pointing on the most 
         relevant network adapter (in my case: the Ethernet card on the 
         desktop, or the wifi card on the laptop)

(image "K8s BARE - 0 - Description")
(image "K8s BARE - 1 - Memory")
(image "K8s BARE - 2 - CPU")
(image "K8s BARE - 3 - 1st Network interface")
(image "K8s BARE - 4 - 2nd Network interface")

In order to make this VM a generic basis on which we can run any type of k8s
nodes, we then need to log as root and (in this order):
  - to install docker
  - to disable the swap
  - to install kubernetes

For convenience, in this tutorial, we will configure the VMs by connecting 
into them via ssh from terminals running on the host machine, using the 
default admin profile (login=thierry, password=thierry) (Secure, huh!!!). 
There are few advantages doing so, namely the fact that the prompt then tells 
on which machine you are actually logged, which is very convenient when you 
will have 3 VMs running at the same time.

To do so, you need to identify the ip@ of the VM: it will be displayed on 
your first loging into the VM from the VM window:

(image "K8s BARE - 5 - Login from the VM")

Open a terminal and - as a regular user on hte host machine, ssh into the VM:
(in my case, the hostname of my laptop is 'laptop' and my login is 'tso')

tso@laptop:~$ ssh thierry@192.168.0.111

The first time you connect on a remote machine, you're asked to confirm: 
confirm by typing 'yes' and then enter the password:

The authenticity of host '192.168.0.111 (192.168.0.111)' can't be established.
ECDSA key fingerprint is SHA256:blStegSimd9FZS74HYnmTW4CxvNY0gI2LDP7YCcbuzY.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.0.111' (ECDSA) to the list of known hosts.
thierry@192.168.0.111's password: 

You are now connected on the VM and your prompt will show it:

(K8s BARE - 6 - Login from a terminal)

thierry@k8s_node:~$

You are logged as 'thierry' and not anymore 'tso' and you are on 'k8s_node'*
and not on 'laptop' anymore.

*: the initial name of the machine is whatever you have specified when 
building the fist image from the Ubuntu OS in VirtualBox. I used the generic 
name 'k8s_node' because the same VM will later be used to configure both 
master and slave nodes.


We must do the following steps as 'root':

$ sudo su

The prompt becomes # and we can continue the next steps.

We will install docker: collect the certificates, add the signing key to the 
local apt repository, add the docker repository... and finally install docker:

# apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common
# curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg | apt-key add -
# add-apt-repository "deb https://download.docker.com/linux/debian stretch stable"
# apt-get update
# apt-get install -y docker-ce

Then we must disable the swap: we do so immediately with the "swappoff" 
command:

# swapoff -a

and we also prevent the swap to be re-activated at next boot, by editing the 
fstab file (/etc/fstab) and disable the line indicating the swap partition 
by commenting it (i.e. add a '#' at the beginning of the line). Thus, the 
original file changes from:

UUID=96b5fd56-93ab-4512-a2da-c89f56a73da3 / ext4 defaults 0 0
/swap.img	none	swap	sw	0	0

to:

UUID=96b5fd56-93ab-4512-a2da-c89f56a73da3 / ext4 defaults 0 0
#/swap.img	none	swap	sw	0	0


We will then install Kubernetes: collect the certificates, add the signing 
key to the local apt repository, add the google kubernetes repository... and 
finally install docker:

# curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
# add-apt-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
# apt-get update
# apt-get install -y kubelet kubeadm kubectl


Here we are !!!
The generic VM is setup, and we can use this basis for crafting teh master 
and slave nodes. As a matter of precaution, you should log out, go in 
VirtualBox and shutdown the VM (softly), take a snapshot of the VM and export 
it as and appliance under the name of  "K8s BARE".


=========================================
2.2 - Building the master and slave nodes
=========================================

In this section, we will configure one master node and two slave nodes 
from "K8s BARE". To do so, we will clone K8s_BARE (which VirtualBox does very
easily).

In order to reduce the memory footprint of the tutorial, choose 'linked clone'
rather than 'full clone', since each VM virtual disk is more than 3.5GB (and
the laptop does not have infinite storage).

(K8s BARE - 7 - Cloning)

And you should get something looking like this:

(K8s BARE - 8 - Cloned machines)

Start the three VMs in VirtualBox, and as shown in the previous section, 
log in, identify the ip@, and connect on these VMs from terminals running on 
the host machine.

Since almost all prerequisites were already installed in the previous phase, 
the task here merely consists in renaming the machines so that a) you know on
which machine you are logged, and b) you prevent naming conflicts within the
kubernetes cluster later on (since every node must have a unique name in the 
cluster).

So we will edit two files: /etc/hosts and /etc/hostname

Log into the first VM (in our case 'ssh thierry@192.168.0.108) and edit the
file /etc/hostname: replace the previous host name (k8s-node) with the new
host name 'k8s-master'.

Then edit the file /etc/hosts and add the new name 'k8s-master after
'127.0.0.1   localhost'.

After edition, it should look like this:

thierry@k8s-master:~$ cat /etc/hostname 
k8s-master

thierry@k8s-master:~$ cat /etc/hosts
127.0.0.1 localhost k8s-master
127.0.1.1 k8s_node

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters

Then do so on the two other machines (respectively at 192.168.0.109 and 
192.168.0.110) with the new host names 'k8s-slave1' and 'k8s-slave2'.

That's it! We now have 3 machines running on the laptop, with all the 
prerequisites installed and the right configuration to make them a master 
and two slaves.

We can test the connectivity between the machines on the laptop (ping from 
one machine to the other) to check that there is no problem, and then go to
the next section.


=====================================
2.2 - Configure and start the cluster
=====================================

To start with, we will initiate the cluster on the master node.

SSH onto the master node and log as root. To initiate the cluster, we will use 
'kubeadm' with the 'init' command. We specify two arguments:
    - specify the 'internal cluster network' which will enable the nodes to 
      communicate one with the other. This internal network uses the second 
      network interface declared in VirtualBox (the one in bridge mode, and
      use a dedicated internal IP range (10.244.0.0-255 in this example).
    - specifiy that the master node must advertise its own IP@ in order to 
      enable the slave nodes to first connect to the master node.

root@k8s-master:/# kubeadm init --pod-network-cidr=10.244.0.0/16 \
      --apiserver-advertise-address=192.168.0.108

The whole setup can take a bit of time, and it shoudl conclude with displaying 
the following message (truncated):

[init] Using Kubernetes version: v1.16.3
[preflight] Running pre-flight checks
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[...]
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as 
root:

kubeadm join 192.168.0.108:6443 --token q3nz0g.n2l9ow787j7enj8j \
    --discovery-token-ca-cert-hash sha256:191a8bc561c244591b428dd3a8b82f0b26d34afeed4115626c876c97a6839729


Here you are: your Kubernetes master has initialized successfully!
You can see that the message displayed during the initialisation process 
includes three very important directives:
    - you need to create a configuration file to be able to operate the 
      cluster as a regulaer user (i.e. not root)
    - you need to actually deploy the network which will connect all the pods 
      together, and you will have to choose one of the possible network 
      configurations.
    - you are given the information needed for a slave node to join the 
      cluster by giving the right token and the public key of the master.

So, let's follow these directives:

The next step is to configure the 'regular' user (i.e. not root) on the 
master node who will manage the cluster. First we logout as 'root' but we 
stay logged as 'thierry' on the master, and as a 'thierry' we enter the 
commands given in the initialization message:

$ mkdir -p $HOME/.kube
$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config

Then we must deploy the network within the cluster. For the sake of 
simplicity, we will use the 'flannel' network configuration (not because it 
is better than others, but because I know it is simple to make it work).

thierry@k8s-master:~$ kubectl apply -f https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml
clusterrole.rbac.authorization.k8s.io/flannel created
clusterrolebinding.rbac.authorization.k8s.io/flannel created
serviceaccount/flannel created
configmap/kube-flannel-cfg created
daemonset.extensions/kube-flannel-ds-amd64 created
daemonset.extensions/kube-flannel-ds-arm64 created
daemonset.extensions/kube-flannel-ds-arm created
daemonset.extensions/kube-flannel-ds-ppc64le created
daemonset.extensions/kube-flannel-ds-s390x created

Once you have received this message, the master will need a bit of time to 
process the deployment as it will actually spawn noew pods in charge of 
operating the network. You can see the progress by asking several times to 
show the pods running on the master with the command:
$ kubectl get pods --all-namespaces -o wide

See the results at several seconds distance, and observe that the pods status
evolves as their get from 'Pending' to 'ContainerCreating' and finally to 
'Running'.

thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE   IP          NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-nxhfs             0/1     Pending   0          64s   <none>      <none>       <none>           <none>
kube-system   coredns-5644d7b6d9-t8zsz             0/1     Pending   0          64s   <none>      <none>       <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   0          77s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   0          81s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   1          97s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-nxx7k          1/1     Running   0          13s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-proxy-znwt2                     1/1     Running   0          64s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   1          97s   10.0.2.15   k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS              RESTARTS   AGE    IP          NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-nxhfs             0/1     ContainerCreating   0          70s    <none>      k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-t8zsz             0/1     ContainerCreating   0          70s    <none>      k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running             0          83s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running             0          87s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running             1          103s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-nxx7k          1/1     Running             0          19s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-proxy-znwt2                     1/1     Running             0          70s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running             1          103s   10.0.2.15   k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE    IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-nxhfs             1/1     Running   0          78s    10.244.0.2   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-t8zsz             0/1     Running   0          78s    10.244.0.3   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   0          91s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   0          95s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   1          111s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-nxx7k          1/1     Running   0          27s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-znwt2                     1/1     Running   0          78s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   1          111s   10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE    IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-nxhfs             1/1     Running   0          83s    10.244.0.2   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-t8zsz             1/1     Running   0          83s    10.244.0.3   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   0          96s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   0          100s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   1          116s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-nxx7k          1/1     Running   0          32s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-znwt2                     1/1     Running   0          83s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   1          116s   10.0.2.15    k8s-master   <none>           <none>

This is actually interesting as it reveals one key nature of Kubernetes: it
will enable you to run containerized applications, but it relies itself on 
launching containers (i.e. containerized applications) to do its job. As your
can see above, it launches a DNS application wich will serve to connect pods
within the cluster: this DNS application is itself running in a container, 
managed as a pod.

Looking at the list of the pods, you see that Kubernetes launched several 
applications: an API server, a proxy, a scheduler, a datastore (ETCD), two
DNS... and a controller manager. We will see abit later all these functions.

Nevertheless, the master is still alone; you have not yet joined a slave into
the cluster. You can see all the nodes in the cluster with the command
'kubectl get nodes':

thierry@k8s-master:~$ kubectl get nodes
NAME         STATUS   ROLES    AGE     VERSION
k8s-master   Ready    master   8m36s   v1.16.3


So it's time to join the two slaves into the cluster. To do so, we need to 
log into the slave nodes (with ssh), as 'root', and use the token and key 
which were displayed at the end of the cluster initialisation message:

root@k8s-slave1:/# kubeadm join 192.168.0.108:6443 --token q3nz0g.n2l9ow787j7enj8j \
    --discovery-token-ca-cert-hash sha256:191a8bc561c244591b428dd3a8b82f0b26d34afeed4115626c876c97a6839729

et ensuite:

root@k8s-slave2:/# kubeadm join 192.168.0.108:6443 --token q3nz0g.n2l9ow787j7enj8j \
    --discovery-token-ca-cert-hash sha256:191a8bc561c244591b428dd3a8b82f0b26d34afeed4115626c876c97a6839729


You then come back to the master node and check the status of the cluster. 
Check the number of nodes:

thierry@k8s-master:~$ kubectl get nodes
NAME         STATUS   ROLES    AGE     VERSION
k8s-master   Ready    master   5m53s   v1.16.3
k8s-slave1   Ready    <none>   21s     v1.16.3
thierry@k8s-master:~$ kubectl get nodes
NAME         STATUS     ROLES    AGE    VERSION
k8s-master   Ready      master   10m    v1.16.3
k8s-slave1   Ready      <none>   5m1s   v1.16.3
k8s-slave2   NotReady   <none>   5s     v1.16.3
thierry@k8s-master:~$ kubectl get nodes

Now, let's look at the pods running on the cluster: you can see that some 
pods are now running on the slave nodes as well:

thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE   IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-nxhfs             1/1     Running   1          29h   10.244.0.4   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-t8zsz             1/1     Running   1          29h   10.244.0.5   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   1          29h   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   1          29h   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   3          29h   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-mrm2b          1/1     Running   2          29h   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-flannel-ds-amd64-nxx7k          1/1     Running   1          29h   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-s5dnw          1/1     Running   1          29h   10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-6pwws                     1/1     Running   1          29h   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-proxy-rfpq5                     1/1     Running   1          29h   10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-znwt2                     1/1     Running   1          29h   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   3          29h   10.0.2.15    k8s-master   <none>           <none>


YES!!! The cluster is up and running and the master is actually scheduling 
pods on the slave nods. At this moment, the pods are only Kubernetes 
applications, but this is already showing the principles by which Kubernetes
will schedule you application on the pods.


=========================
2.3 - Setup the dashboard
=========================

The cluster is running but it is very difficult to see what is actually 
happening, so it is time to setup the dashboad which visualizes the status 
of the cluster.

Start with login into the master:




root@k8s-master:/# kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/head.yaml
namespace/kubernetes-dashboard-head created
serviceaccount/kubernetes-dashboard-head created
service/kubernetes-dashboard-head created
secret/kubernetes-dashboard-csrf created
secret/kubernetes-dashboard-key-holder created
configmap/kubernetes-dashboard-settings created
role.rbac.authorization.k8s.io/kubernetes-dashboard-head created
clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard-head created
rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-head created
clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard-head created
deployment.apps/kubernetes-dashboard-head created
service/dashboard-metrics-scraper-head created
deployment.apps/dashboard-metrics-scraper-head created

As you can see, Kubernetes pulls the resources from GitHub and starts pods 
to run the dashboard application (which is a web server). Check where the 
pods are running:

thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide | grep dashb
kubernetes-dashboard-head   dashboard-metrics-scraper-head-7cc7d9bb4b-r9lr6   1/1     Running   0          99s   10.244.1.2   k8s-slave1   <none>           <none>
kubernetes-dashboard-head   kubernetes-dashboard-head-5c87564c95-gl8q6        1/1     Running   0          99s   10.244.2.2   k8s-slave2   <none>           <none>

The workload is distributed over the two slave nodes. In order to access this
dasboard, we now need to creae users with teh right roles and authorisations
(i.e. profiles with the rights in RBAC mode)

Créez un compte utilisateur
Créez un fichier admin-user.yaml avec ce qui suit dedans :

apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kube-system

Puis créez le rôle qui lui sera attaché : admin-role.yaml

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kube-system

Chargez ces configurations dans le cluster :

kubectl apply -f admin-user.yaml
kubectl apply -f admin-role.yaml




thierry@k8s-master:~$ touch admin-user.yaml
thierry@k8s-master:~$ vi admin-user.yaml 
thierry@k8s-master:~$ touch admin-role.yaml
thierry@k8s-master:~$ vi admin-role.yaml 
thierry@k8s-master:~$ kubectl apply -f admin-user.yaml
serviceaccount/admin-user created
thierry@k8s-master:~$ kubectl apply -f admin-role.yaml
clusterrolebinding.rbac.authorization.k8s.io/admin-user created


Récupérer le token de connexion
Pour vous connecter au Dashboard, en plus d'avoir le pod et un utilisateur, il vous faut le token qui va bien. Pour le récupérer :

Name:         admin-user-token-g4h4m
Namespace:    kube-system
Labels:       <none>
Annotations:  kubernetes.io/service-account.name: admin-user
              kubernetes.io/service-account.uid: 2124843b-2815-47f5-a558-cb5956bd61d7

Type:  kubernetes.io/service-account-token

Data
====
ca.crt:     1025 bytes
namespace:  11 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IkUyTVprdjJuMGJ1NkVyeFlweFVHd2RtWHR2ZHFDS1JFb21SMDNQNEY3UlUifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWc0aDRtIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIyMTI0ODQzYi0yODE1LTQ3ZjUtYTU1OC1jYjU5NTZiZDYxZDciLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.JmnyHQCNRqT90GhMub82keXrhJGi5cOVrKdPoM1Psw6s7qDBRpOobthUVw1KJ5abnFgTnEhVmRW52HcF4dCg2aPcKa5PcFidXtXVdyFXHM2-VUVYDw-97yeVKm9degPES11rs5bcnGGX0Fp7TAN38IhwmDDVcmcR4S7EftnOk1_RkG77Fuauu4mDYDO6kzm9ySrdMP_eF2XsoZr_1JLGucGmMDKaAryRAHPTl11t-i45mE_6NtxGdYo1eukPqKpvKF7-fQz-0Bbg3Pzavoko-nrv1TPZECPAj_cXZk3wptoYzg-Ye_h_dua0ue6CUanE1SY60u0kDmPK8aXGJfZUaw


Copy the token (yeah, I know, its long...)


Accéder au Dashboard
Le Dashboard n'est par défaut pas accessible en dehors du cluster. On peut cependant tricher en passant par un proxy et un tunnel SSH.
Le proxy
Ouvrez un nouveau terminal branché sur votre master et tapez la commande suivante :

dada@k8smaster:~$ kubectl proxy
Starting to serve on 127.0.0.1:8001

Le tunnel SSH
Depuis votre PC hôte, lancez le tunnel :

dada@dada-laptop:~$ ssh -L 8001:127.0.0.1:8001 thierry@192.168.0.108

Affichez le fameux tant attendu
Si tout s'est bien passé jusqu'ici, vous deviez pouvoir accéder au Dashboard via cette url :

http://192.168.0.108:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/overview?namespace=_all 

=> ça ne marche pas: ce qui s'affiche est un record de failure.

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

Kubernetes coordinates a highly available cluster of computers that are 
connected to work as a single unit. The abstractions in Kubernetes allow 
you to deploy containerized applications to a cluster without tying them 
specifically to individual machines. To make use of this new model of 
deployment, applications need to be packaged in a way that decouples them 
from individual hosts: they need to be containerized. Containerized 
applications are more flexible and available than in past deployment 
models, where applications were installed directly onto specific machines 
as packages deeply integrated into the host. Kubernetes automates the 
distribution and scheduling of application containers across a cluster in 
a more efficient way.
Kubernetes is an open-source platform and is production-ready.

A Kubernetes cluster consists of two types of resources:

    The Master coordinates the cluster
    Nodes are the workers that run applications


Cluster Diagram


The Master is responsible for managing the cluster. The master coordinates 
all activities in your cluster, such as scheduling applications, 
maintaining applications' desired state, scaling applications, and rolling 
out new updates.

A node is a VM or a physical computer that serves as a worker machine in 
a Kubernetes cluster. Each node has a Kubelet, which is an agent for 
managing the node and communicating with the Kubernetes master. The node 
should also have tools for handling container operations, such as Docker or 
rkt. A Kubernetes cluster that handles production traffic should have a 
minimum of three nodes.

Masters manage the cluster and the nodes are used to host the running 
applications.

When you deploy applications on Kubernetes, you tell the master to start 
the application containers. The master schedules the containers to run on 
the cluster's nodes. The nodes communicate with the master using the 
Kubernetes API, which the master exposes. End users can also use the 
Kubernetes API directly to interact with the cluster.

A Kubernetes cluster can be deployed on either physical or virtual 
machines. In our case, I explained in Part I how to deploy a Kubernetes 
cluster in such a way.

Various Kubernetes commands enable you to interact with the cluster:

To check that the cluster is alive, you can run the version command:

$ kubectl version
Client Version: version.Info{Major:"1", Minor:"16", GitVersion:"v1.16.3", GitCommit:"b3cbbae08ec52a7fc73d334838e18d17e8512749", GitTreeState:"clean", BuildDate:"2019-11-13T11:23:11Z", GoVersion:"go1.12.12", Compiler:"gc", Platform:"linux/amd64"}
Server Version: version.Info{Major:"1", Minor:"16", GitVersion:"v1.16.3", GitCommit:"b3cbbae08ec52a7fc73d334838e18d17e8512749", GitTreeState:"clean", BuildDate:"2019-11-13T11:13:49Z", GoVersion:"go1.12.12", Compiler:"gc", Platform:"linux/amd64"}

And view the cluster details:

$ kubectl cluster-info
Kubernetes master is running at https://192.168.0.108:6443
KubeDNS is running at https://192.168.0.108:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

We have a running master and a dashboard. The Kubernetes dashboard allows 
you to view your applications in a UI. During this tutorial, we’ll be 
focusing on the command line for deploying and exploring our application. 
To view the nodes in the cluster, run the kubectl get nodes command:

$ kubectl get nodes
NAME         STATUS   ROLES    AGE   VERSION
k8s-master   Ready    master   64m   v1.16.3
k8s-slave1   Ready    <none>   58m   v1.16.3
k8s-slave2   Ready    <none>   53m   v1.16.3

This command shows all nodes that can be used to host our applications. 
Now we have three nodes, and we can see that their status is ready (it is 
ready to accept applications for deployment).



Installing the dashboard:


To install the Dashboard, run the following command from the master:

$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended/kubernetes-dashboard.yaml

Kubernetes va aller chercher la configuration nécessaire la mise à en place du Dashboard directement depuis son dépôt Github et le faire apparaître dans la liste des pods de votre cluster.

$  kubectl get pods --all-namespaces -o wide | grep dashb
kube-system   kubernetes-dashboard-77fd78f978-f8p9l   1/1     Running   0          60s     10.244.1.230   k8snode1    <none>

Il est  "Running", ça veut dire qu'il est disponible, mais pas encore accessible.
Créez un compte utilisateur
Créez un fichier admin-user.yaml avec ce qui suit dedans :

apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kube-system

Puis créez le rôle qui lui sera attaché : admin-role.yaml

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kube-system

Chargez ces configurations dans le cluster :

kubectl apply -f admin-user.yaml
kubectl apply -f admin-role.yaml

Récupérer le token de connexion
Pour vous connecter au Dashboard, en plus d'avoir le pod et un utilisateur, il vous faut le token qui va bien. Pour le récupérer :

dada@k8smaster:~$ kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}')
Name:         admin-user-token-b8qmq
Namespace:    kube-system
Labels:       <none>
Annotations:  kubernetes.io/service-account.name: admin-user
              kubernetes.io/service-account.uid: a8a600b1-e010-11e8-96ec-0800273c4560

Type:  kubernetes.io/service-account-token

Data
====
ca.crt:     1025 bytes
namespace:  11 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJl.........

J'ai tronqué l'affichage du token. Il est d'une longueur dingue. Copiez-le dans un coin maintenant que vous l'avez.
Accéder au Dashboard
Le Dashboard n'est par défaut pas accessible en dehors du cluster. On peut cependant tricher en passant par un proxy et un tunnel SSH.
Le proxy
Ouvrez un nouveau terminal branché sur votre master et tapez la commande suivante :

dada@k8smaster:~$ kubectl proxy
Starting to serve on 127.0.0.1:8001

Le tunnel SSH
Depuis votre PC hôte, lancez le tunnel :

dada@dada-laptop:~$ ssh -L 8001:127.0.0.1:8001 dada@IP_DU_MASTER

Affichez le fameux tant attendu
Si tout s'est bien passé jusqu'ici, vous deviez pouvoir accéder au Dashboard via cette url :

http://127.0.0.1:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/overview?namespace=_all

Et voir ceci : 


Vous voici avec une belle interface pour admirer le comportement de votre cluster k8s. Foncez cliquer absolument partout et chercher le pourquoi du comment de telles options à tel endroit !






###############################################################################
#
# Learn Kubernetes Basics - Part 3 - Deploy an app
#
###############################################################################


###############################################################################
#
# Learn Kubernetes Basics - Part 4 - Explore your app
#
###############################################################################


###############################################################################
#
# Learn Kubernetes Basics - Part 5 - Expose Your App Publicly
#
###############################################################################


###############################################################################
#
# Learn Kubernetes Basics - Part 6 - Scale Your App
#
###############################################################################


###############################################################################
#
# Learn Kubernetes Basics - Part 7 - Update Your App
#
###############################################################################





PART III : create a deployment

Using kubectl to Create a Deployment
Objectives

    Learn about application Deployments.
    Deploy your first app on Kubernetes with kubectl.

Kubernetes Deployments

Once you have a running Kubernetes cluster, you can deploy your containerized applications on top of it. To do so, you create a Kubernetes Deployment configuration. The Deployment instructs Kubernetes how to create and update instances of your application. Once you've created a Deployment, the Kubernetes master schedules mentioned application instances onto individual Nodes in the cluster.

Once the application instances are created, a Kubernetes Deployment Controller continuously monitors those instances. If the Node hosting an instance goes down or is deleted, the Deployment controller replaces the instance with an instance on another Node in the cluster. This provides a self-healing mechanism to address machine failure or maintenance.

In a pre-orchestration world, installation scripts would often be used to start applications, but they did not allow recovery from machine failure. By both creating your application instances and keeping them running across Nodes, Kubernetes Deployments provide a fundamentally different approach to application management.
Summary:

    Deployments
    Kubectl

A Deployment is responsible for creating and updating instances of your application

Deploying your first app on Kubernetes


You can create and manage a Deployment by using the Kubernetes command line interface, Kubectl. Kubectl uses the Kubernetes API to interact with the cluster. In this module, you'll learn the most common Kubectl commands needed to create Deployments that run your applications on a Kubernetes cluster.

When you create a Deployment, you'll need to specify the container image for your application and the number of replicas that you want to run. You can change that information later by updating your Deployment; Modules 5 and 6 of the bootcamp discuss how you can scale and update your Deployments.

Applications need to be packaged into one of the supported container formats in order to be deployed on Kubernetes

For your first Deployment, you'll use a Node.js application packaged in a Docker container. (If you didn't already try creating a Node.js application and deploying it using a container, you can do that first by following the instructions from the Hello Minikube tutorial).

Now that you know what Deployments are, let's go to the online tutorial and deploy our first app!



==============================================================================

LOGS

==============================================================================


thierry@k8s-master:~$ mkdir -p $HOME/.kube
thierry@k8s-master:~$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
thierry@k8s-master:~$ sudo chown $(id -u):$(id -g) $HOME/.kube/config
thierry@k8s-master:~$ sudo chown $(id -u):$(id -g) $HOME/.kube/config
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE   IP          NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             0/1     Pending   0          82s   <none>      <none>       <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             0/1     Pending   0          82s   <none>      <none>       <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   0          28s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   0          41s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   0          30s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running   0          82s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   0          41s   10.0.2.15   k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE   IP          NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             0/1     Pending   0          93s   <none>      <none>       <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             0/1     Pending   0          93s   <none>      <none>       <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   0          39s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   0          52s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   0          41s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running   0          93s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   0          52s   10.0.2.15   k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE   IP          NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             0/1     Pending   0          99s   <none>      <none>       <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             0/1     Pending   0          99s   <none>      <none>       <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   0          45s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   0          58s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   0          47s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running   0          99s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   0          58s   10.0.2.15   k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE    IP          NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             0/1     Pending   0          101s   <none>      <none>       <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             0/1     Pending   0          101s   <none>      <none>       <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   0          47s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   0          60s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   0          49s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running   0          101s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   0          60s    10.0.2.15   k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl apply -f https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml
podsecuritypolicy.policy/psp.flannel.unprivileged created
clusterrole.rbac.authorization.k8s.io/flannel created
clusterrolebinding.rbac.authorization.k8s.io/flannel created
serviceaccount/flannel created
configmap/kube-flannel-cfg created
daemonset.apps/kube-flannel-ds-amd64 created
daemonset.apps/kube-flannel-ds-arm64 created
daemonset.apps/kube-flannel-ds-arm created
daemonset.apps/kube-flannel-ds-ppc64le created
daemonset.apps/kube-flannel-ds-s390x created
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS     RESTARTS   AGE     IP          NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             0/1     Pending    0          2m23s   <none>      <none>       <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             0/1     Pending    0          2m23s   <none>      <none>       <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running    0          89s     10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running    0          102s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running    0          91s     10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          0/1     Init:0/1   0          3s      10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running    0          2m23s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running    0          102s    10.0.2.15   k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl apply -f https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml
podsecuritypolicy.policy/psp.flannel.unprivileged configured
clusterrole.rbac.authorization.k8s.io/flannel unchanged
clusterrolebinding.rbac.authorization.k8s.io/flannel unchanged
serviceaccount/flannel unchanged
configmap/kube-flannel-cfg unchanged
daemonset.apps/kube-flannel-ds-amd64 unchanged
daemonset.apps/kube-flannel-ds-arm64 unchanged
daemonset.apps/kube-flannel-ds-arm unchanged
daemonset.apps/kube-flannel-ds-ppc64le unchanged
daemonset.apps/kube-flannel-ds-s390x unchanged
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE     IP          NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             0/1     Pending   0          2m35s   <none>      <none>       <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             0/1     Pending   0          2m35s   <none>      <none>       <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   0          101s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   0          114s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   0          103s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running   0          15s     10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running   0          2m35s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   0          114s    10.0.2.15   k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE     IP          NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             0/1     Pending   0          2m39s   <none>      <none>       <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             0/1     Pending   0          2m39s   <none>      <none>       <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   0          105s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   0          118s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   0          107s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running   0          19s     10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running   0          2m39s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   0          118s    10.0.2.15   k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE     IP          NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             0/1     Pending   0          2m42s   <none>      <none>       <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             0/1     Pending   0          2m42s   <none>      <none>       <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   0          108s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   0          2m1s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   0          110s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running   0          22s     10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running   0          2m42s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   0          2m1s    10.0.2.15   k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS              RESTARTS   AGE     IP          NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             0/1     Pending             0          2m46s   <none>      <none>       <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             0/1     ContainerCreating   0          2m46s   <none>      k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running             0          112s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running             0          2m5s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running             0          114s    10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running             0          26s     10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running             0          2m46s   10.0.2.15   k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running             0          2m5s    10.0.2.15   k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS              RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             0/1     ContainerCreating   0          2m50s   <none>       k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             0/1     Running             0          2m50s   10.244.0.2   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running             0          116s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running             0          2m9s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running             0          118s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running             0          30s     10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running             0          2m50s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running             0          2m9s    10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             0/1     Running   0          2m53s   10.244.0.3   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             1/1     Running   0          2m53s   10.244.0.2   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   0          119s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   0          2m12s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   0          2m1s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running   0          33s     10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running   0          2m53s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   0          2m12s   10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             0/1     Running   0          2m55s   10.244.0.3   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             1/1     Running   0          2m55s   10.244.0.2   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   0          2m1s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   0          2m14s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   0          2m3s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running   0          35s     10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running   0          2m55s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   0          2m14s   10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             0/1     Running   0          2m57s   10.244.0.3   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             1/1     Running   0          2m57s   10.244.0.2   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   0          2m3s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   0          2m16s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   0          2m5s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running   0          37s     10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running   0          2m57s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   0          2m16s   10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             0/1     Running   0          3m      10.244.0.3   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             1/1     Running   0          3m      10.244.0.2   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   0          2m6s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   0          2m19s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   0          2m8s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running   0          40s     10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running   0          3m      10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   0          2m19s   10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             1/1     Running   0          3m3s    10.244.0.3   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             1/1     Running   0          3m3s    10.244.0.2   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   0          2m9s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   0          2m22s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   0          2m11s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running   0          43s     10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running   0          3m3s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   0          2m22s   10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS              RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             1/1     Running             0          4m30s   10.244.0.3   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             1/1     Running             0          4m30s   10.244.0.2   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running             0          3m36s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running             0          3m49s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running             0          3m38s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-lgqv8          1/1     Running             0          11s     10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running             0          2m10s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running             0          4m30s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-c78r7                     0/1     ContainerCreating   0          11s     10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running             0          3m49s   10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             1/1     Running   0          4m34s   10.244.0.3   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             1/1     Running   0          4m34s   10.244.0.2   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   0          3m40s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   0          3m53s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   0          3m42s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-lgqv8          1/1     Running   0          15s     10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running   0          2m14s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running   0          4m34s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-c78r7                     1/1     Running   0          15s     10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   0          3m53s   10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get nodes
NAME         STATUS   ROLES    AGE    VERSION
k8s-master   Ready    master   5m3s   v1.16.3
k8s-slave1   Ready    <none>   24s    v1.16.3
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS              RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             1/1     Running             0          6m52s   10.244.0.3   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             1/1     Running             0          6m52s   10.244.0.2   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running             0          5m58s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running             0          6m11s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running             0          6m      10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-lgqv8          1/1     Running             1          2m33s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running             0          4m32s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-vhf6w          0/1     Init:0/1            0          2s      10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running             0          6m52s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-9qcfg                     0/1     ContainerCreating   0          2s      10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-c78r7                     1/1     Running             0          2m33s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running             0          6m11s   10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS              RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             1/1     Running             0          6m54s   10.244.0.3   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             1/1     Running             0          6m54s   10.244.0.2   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running             0          6m      10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running             0          6m13s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running             0          6m2s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-lgqv8          1/1     Running             1          2m35s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running             0          4m34s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-vhf6w          0/1     Init:0/1            0          4s      10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running             0          6m54s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-9qcfg                     0/1     ContainerCreating   0          4s      10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-c78r7                     1/1     Running             0          2m35s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running             0          6m13s   10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS              RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             1/1     Running             0          6m56s   10.244.0.3   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             1/1     Running             0          6m56s   10.244.0.2   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running             0          6m2s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running             0          6m15s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running             0          6m4s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-lgqv8          1/1     Running             1          2m37s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running             0          4m36s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-vhf6w          0/1     Init:0/1            0          6s      10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running             0          6m56s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-9qcfg                     0/1     ContainerCreating   0          6s      10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-c78r7                     1/1     Running             0          2m37s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running             0          6m15s   10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS              RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             1/1     Running             0          6m57s   10.244.0.3   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             1/1     Running             0          6m57s   10.244.0.2   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running             0          6m3s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running             0          6m16s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running             0          6m5s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-lgqv8          1/1     Running             1          2m38s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running             0          4m37s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-vhf6w          0/1     Init:0/1            0          7s      10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running             0          6m57s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-9qcfg                     0/1     ContainerCreating   0          7s      10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-c78r7                     1/1     Running             0          2m38s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running             0          6m16s   10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS     RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             1/1     Running    0          6m59s   10.244.0.3   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             1/1     Running    0          6m59s   10.244.0.2   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running    0          6m5s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running    0          6m18s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running    0          6m7s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-lgqv8          1/1     Running    1          2m40s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running    0          4m39s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-vhf6w          0/1     Init:0/1   0          9s      10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running    0          6m59s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-9qcfg                     1/1     Running    0          9s      10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-c78r7                     1/1     Running    0          2m40s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running    0          6m18s   10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS     RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             1/1     Running    0          7m      10.244.0.3   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             1/1     Running    0          7m      10.244.0.2   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running    0          6m6s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running    0          6m19s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running    0          6m8s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-lgqv8          1/1     Running    1          2m41s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running    0          4m40s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-vhf6w          0/1     Init:0/1   0          10s     10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running    0          7m      10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-9qcfg                     1/1     Running    0          10s     10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-c78r7                     1/1     Running    0          2m41s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running    0          6m19s   10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS     RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             1/1     Running    0          7m2s    10.244.0.3   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             1/1     Running    0          7m2s    10.244.0.2   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running    0          6m8s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running    0          6m21s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running    0          6m10s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-lgqv8          1/1     Running    1          2m43s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running    0          4m42s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-vhf6w          0/1     Init:0/1   0          12s     10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running    0          7m2s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-9qcfg                     1/1     Running    0          12s     10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-c78r7                     1/1     Running    0          2m43s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running    0          6m21s   10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS            RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             1/1     Running           0          7m4s    10.244.0.3   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             1/1     Running           0          7m4s    10.244.0.2   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running           0          6m10s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running           0          6m23s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running           0          6m12s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-lgqv8          1/1     Running           1          2m45s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running           0          4m44s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-vhf6w          0/1     PodInitializing   0          14s     10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running           0          7m4s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-9qcfg                     1/1     Running           0          14s     10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-c78r7                     1/1     Running           0          2m45s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running           0          6m23s   10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get pods --all-namespaces -o wide
NAMESPACE     NAME                                 READY   STATUS    RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES
kube-system   coredns-5644d7b6d9-2mwj9             1/1     Running   0          7m6s    10.244.0.3   k8s-master   <none>           <none>
kube-system   coredns-5644d7b6d9-pktlz             1/1     Running   0          7m6s    10.244.0.2   k8s-master   <none>           <none>
kube-system   etcd-k8s-master                      1/1     Running   0          6m12s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-apiserver-k8s-master            1/1     Running   0          6m25s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-controller-manager-k8s-master   1/1     Running   0          6m14s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-lgqv8          1/1     Running   1          2m47s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-flannel-ds-amd64-ntrwg          1/1     Running   0          4m46s   10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-flannel-ds-amd64-vhf6w          1/1     Running   0          16s     10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-8xwsz                     1/1     Running   0          7m6s    10.0.2.15    k8s-master   <none>           <none>
kube-system   kube-proxy-9qcfg                     1/1     Running   0          16s     10.0.2.15    k8s-slave2   <none>           <none>
kube-system   kube-proxy-c78r7                     1/1     Running   0          2m47s   10.0.2.15    k8s-slave1   <none>           <none>
kube-system   kube-scheduler-k8s-master            1/1     Running   0          6m25s   10.0.2.15    k8s-master   <none>           <none>
thierry@k8s-master:~$ kubectl get nodes
NAME         STATUS   ROLES    AGE     VERSION
k8s-master   Ready    master   7m33s   v1.16.3
k8s-slave1   Ready    <none>   2m54s   v1.16.3
k8s-slave2   Ready    <none>   23s     v1.16.3
thierry@k8s-master:~$ 

